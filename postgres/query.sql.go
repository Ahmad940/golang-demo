// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const addTodo = `-- name: AddTodo :one
insert into todo (title) values ($1) RETURNING id, title, completed, date
`

func (q *Queries) AddTodo(ctx context.Context, title string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, addTodo, title)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.Date,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
delete from todo where id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
select id, title, completed, date from todo where id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id uuid.UUID) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.Date,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
select id, title, completed, date from todo
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Completed,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
update todo set title = $1, completed = $2 where id = $3 RETURNING id, title, completed, date
`

type UpdateTodoParams struct {
	Title     string    `json:"title"`
	Completed bool      `json:"completed"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Title, arg.Completed, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Completed,
		&i.Date,
	)
	return i, err
}
